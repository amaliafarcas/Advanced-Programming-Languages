Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ intType v, v=2, print(v)  ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ v=2, print(v) , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ v=2, print(v) , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ v=2, print(v) ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ v=2, print(v) ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), v=2]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), v=2]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v)]]
	SymTable = [{v=2}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v)]]
	SymTable = [{v=2}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{v=2}]
	OUT = {[2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))), new(v, 30)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))), new(v, 30)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a)))]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a)))]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       , stringType varf]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       , stringType varf]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       ]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       ]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      , varf=test.in]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      , varf=test.in]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     , openReadFile{expression=varf}]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     , openReadFile{expression=varf}]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    , intType varc]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    , intType varc]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    ]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    ]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ,  print(varc)]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ,  print(varc)]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc),closeReadFile{expression=varf} , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc),closeReadFile{expression=varf} , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc),closeReadFile{expression=varf} ]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc),closeReadFile{expression=varf} ]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[closeReadFile{expression=varf},  print(varc)]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[closeReadFile{expression=varf},  print(varc)]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[closeReadFile{expression=varf}]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15, 50]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[closeReadFile{expression=varf}]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15, 50]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15, 50]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))), new(v, 30)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))), new(v, 30)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a)))]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a)))]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ,  print(ReadHeap(v))]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ,  print(ReadHeap(v))]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5), WrSt = (v, 30)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5), WrSt = (v, 30)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20, 35]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ v=4, (while (v>0)   print(v),v=v-1 ), print(v)  , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ v=4, (while (v>0)   print(v),v=v-1 ), print(v)  , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ v=4, (while (v>0)   print(v),v=v-1 ), print(v)  ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ v=4, (while (v>0)   print(v),v=v-1 ), print(v)  ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ (while (v>0)   print(v),v=v-1 ), print(v) , v=4]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ (while (v>0)   print(v),v=v-1 ), print(v) , v=4]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ (while (v>0)   print(v),v=v-1 ), print(v) ]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ (while (v>0)   print(v),v=v-1 ), print(v) ]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=4}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=4}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=3}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=3}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=2}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=2}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v)]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v)]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1, 0]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a),  print(v)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a),  print(v)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[(1, intType), (2,  Reference intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ,  print(ReadHeap(v))]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ,  print(ReadHeap(v))]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(v)+5), WrSt = (v, 30)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(v)+5), WrSt = (v, 30)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(v)+5)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(v)+5)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20, 35]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ) ,  print(v1)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ) ,  print(v1)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ) ,  print(v1)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ) ,  print(v1)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )  , WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )  , WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ) ,  print(v2)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ) ,  print(v2)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(v3),CountDown(cnt) , WrSt = (v3, ReadHeap(v3)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(v3),CountDown(cnt) , WrSt = (v3, ReadHeap(v3)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(v3),CountDown(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(v3),CountDown(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt),  print(v3)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt),  print(v3)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3, (3, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3, (3, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3, (3, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3, (3, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3, (3, intType), 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3, (3, intType), 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3, (3, intType), 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3, (3, intType), 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3, (3, intType), 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ,  print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3, (3, intType), 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ,  print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3, (3, intType), 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3, (3, intType), 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3, (3, intType), 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3, (3, intType), 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3, (3, intType), 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3, (3, intType), 4, 100, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3, (3, intType), 4, 100, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[(1, intType), 2, (2, intType), 3, (3, intType), 4, 100, 1, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(v1), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(v2), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(v3),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ,  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ,  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  , WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  , WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ,  print(ReadHeap(v2))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ,  print(ReadHeap(v2))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) , WrSt = (v3, ReadHeap(v3)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) , WrSt = (v3, ReadHeap(v3)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt),  print(ReadHeap(v3))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt),  print(ReadHeap(v3))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ,  print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ,  print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 6
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 5
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 6
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 6
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 6
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 6
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 6
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 6
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ,  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 6
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ,  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 6
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 6
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 6
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 6
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 6
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 6
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 6
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 7
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 7
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 7
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  , WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 7
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  , WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 7
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 7
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 7
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ,  print(ReadHeap(v2))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 7
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ,  print(ReadHeap(v2))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 7
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 7
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 7
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 7
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 7
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 7
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 7
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 8
	ExeStack = [[ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 8
	ExeStack = [[ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 8
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) , WrSt = (v3, ReadHeap(v3)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 8
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) , WrSt = (v3, ReadHeap(v3)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 8
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 8
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 8
	ExeStack = [[CountDown(cnt),  print(ReadHeap(v3))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 8
	ExeStack = [[CountDown(cnt),  print(ReadHeap(v3))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 8
	ExeStack = [[CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 8
	ExeStack = [[CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7, 40, 8]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 8
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7, 40, 8]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7, 40, 8]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7, 40, 8]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[  print(100), CountDown(cnt), print(100)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7, 40, 8]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ CountDown(cnt), print(100) ,  print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7, 40, 8]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ CountDown(cnt), print(100) ,  print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7, 40, 8]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ CountDown(cnt), print(100) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7, 40, 8, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ CountDown(cnt), print(100) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7, 40, 8, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ print(100), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7, 40, 8, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ print(100), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7, 40, 8, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7, 40, 8, 100, 5]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[ print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7, 40, 8, 100, 5]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 5
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 6, 30, 7, 40, 8, 100, 5, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 9
	ExeStack = [[ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       , stringType varf]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       , stringType varf]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       ]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       ]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      , varf=test.in]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      , varf=test.in]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     , openReadFile{expression=varf}]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     , openReadFile{expression=varf}]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    , intType varc]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    , intType varc]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    ]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    ]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ,  print(varc)]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ,  print(varc)]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[  print(varc),closeReadFile{expression=varf} , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[  print(varc),closeReadFile{expression=varf} , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[  print(varc),closeReadFile{expression=varf} ]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[  print(varc),closeReadFile{expression=varf} ]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[closeReadFile{expression=varf},  print(varc)]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[closeReadFile{expression=varf},  print(varc)]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[closeReadFile{expression=varf}]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15, 50]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[closeReadFile{expression=varf}]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15, 50]}
	MyFileTable = [{test.in=java.io.BufferedReader@50676bcb}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 9
	ExeStack = [[]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15, 50]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ,  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ,  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  , WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  , WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ,  print(ReadHeap(v2))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ,  print(ReadHeap(v2))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) , WrSt = (v3, ReadHeap(v3)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) , WrSt = (v3, ReadHeap(v3)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt),  print(ReadHeap(v3))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt),  print(ReadHeap(v3))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ,  print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ,  print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ,  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ,  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  , WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  , WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ,  print(ReadHeap(v2))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ,  print(ReadHeap(v2))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) , WrSt = (v3, ReadHeap(v3)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) , WrSt = (v3, ReadHeap(v3)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt),  print(ReadHeap(v3))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt),  print(ReadHeap(v3))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ,  print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ,  print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ,  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ,  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  , WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  , WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ,  print(ReadHeap(v2))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ,  print(ReadHeap(v2))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) , WrSt = (v3, ReadHeap(v3)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) , WrSt = (v3, ReadHeap(v3)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt),  print(ReadHeap(v3))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt),  print(ReadHeap(v3))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ,  print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ,  print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a),  print(v)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a),  print(v)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[(1, intType), (2,  Reference intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ,  print(ReadHeap(v))]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ,  print(ReadHeap(v))]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5), WrSt = (v, 30)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5), WrSt = (v, 30)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20, 35]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ,  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ,  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  , WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  , WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ,  print(ReadHeap(v2))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ,  print(ReadHeap(v2))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) , WrSt = (v3, ReadHeap(v3)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) , WrSt = (v3, ReadHeap(v3)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt),  print(ReadHeap(v3))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt),  print(ReadHeap(v3))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ,  print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ,  print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ,  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ,  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  , WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  , WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ,  print(ReadHeap(v2))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ,  print(ReadHeap(v2))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) , WrSt = (v3, ReadHeap(v3)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) , WrSt = (v3, ReadHeap(v3)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt),  print(ReadHeap(v3))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt),  print(ReadHeap(v3))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ,  print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ,  print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)           ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)          ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ,  Reference intType v3]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)         ]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        , intType cnt]]
	SymTable = [{v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)        ]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       , new(v1, 2)]]
	SymTable = [{cnt=0, v1=(0, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)       ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      , new(v2, 3)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(0, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)      ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     , new(v3, 4)]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)     ]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    , NewLatch(cnt, ReadHeap(v2))]]
	SymTable = [{cnt=0, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)    ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   , fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[ Await(cnt),  print(100), CountDown(cnt), print(100)   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=2, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ,  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ,  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=3}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  , WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  , WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=3, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ,  print(ReadHeap(v2))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ,  print(ReadHeap(v2))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[ CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=2}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) , WrSt = (v3, ReadHeap(v3)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) , WrSt = (v3, ReadHeap(v3)*10)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=4}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[  print(ReadHeap(v3)),CountDown(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt),  print(ReadHeap(v3))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt),  print(ReadHeap(v3))]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=1}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [ WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  , Await(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[  print(100), CountDown(cnt), print(100)  ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ,  print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ,  print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ CountDown(cnt), print(100) ]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100), CountDown(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[ print(100)]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType), v2=(2, intType), v3=(3, intType)}]
	OUT = {[20, 2, 30, 3, 40, 4, 100, 1, 100]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=40}]
	MyLatchTable = [{100=0}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2,  Reference intType v3, intType cnt, new(v1, 2), new(v2, 3), new(v3, 4), NewLatch(cnt, ReadHeap(v2)), fork( WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)), CountDown(cnt),fork( WrSt = (v2, ReadHeap(v2)*10),  print(ReadHeap(v2)), CountDown(cnt),fork( WrSt = (v3, ReadHeap(v3)*10),  print(ReadHeap(v3)),CountDown(cnt)  )   )   ), Await(cnt),  print(100), CountDown(cnt), print(100)            ]


