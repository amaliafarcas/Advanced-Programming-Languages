Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ intType v, v=2, print(v)  ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ v=2, print(v) , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ v=2, print(v) , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ v=2, print(v) ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ v=2, print(v) ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), v=2]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), v=2]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v)]]
	SymTable = [{v=2}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v)]]
	SymTable = [{v=2}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{v=2}]
	OUT = {[2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))), new(v, 30)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))), new(v, 30)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a)))]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a)))]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       , stringType varf]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       , stringType varf]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       ]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       ]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      , varf=test.in]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      , varf=test.in]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     , openReadFile{expression=varf}]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     , openReadFile{expression=varf}]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    , intType varc]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    , intType varc]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    ]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    ]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ,  print(varc)]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ,  print(varc)]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc),closeReadFile{expression=varf} , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc),closeReadFile{expression=varf} , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc),closeReadFile{expression=varf} ]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc),closeReadFile{expression=varf} ]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[closeReadFile{expression=varf},  print(varc)]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[closeReadFile{expression=varf},  print(varc)]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[closeReadFile{expression=varf}]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15, 50]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[closeReadFile{expression=varf}]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15, 50]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15, 50]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))), new(v, 30)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))), new(v, 30)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a)))]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a)))]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ,  print(ReadHeap(v))]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ,  print(ReadHeap(v))]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5), WrSt = (v, 30)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5), WrSt = (v, 30)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20, 35]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ v=4, (while (v>0)   print(v),v=v-1 ), print(v)  , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ v=4, (while (v>0)   print(v),v=v-1 ), print(v)  , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ v=4, (while (v>0)   print(v),v=v-1 ), print(v)  ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ v=4, (while (v>0)   print(v),v=v-1 ), print(v)  ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ (while (v>0)   print(v),v=v-1 ), print(v) , v=4]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ (while (v>0)   print(v),v=v-1 ), print(v) , v=4]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ (while (v>0)   print(v),v=v-1 ), print(v) ]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ (while (v>0)   print(v),v=v-1 ), print(v) ]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=4}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=4}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=3}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=3}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=2}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=2}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v)]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v)]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1, 0]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))+5),  print(ReadHeap(v))]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))+5),  print(ReadHeap(v))]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))+5)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))+5)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[20, 25]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 2
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 2
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 2
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 2
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(ReadHeap(v)), print(ReadHeap(ReadHeap(a))+5)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ,  Reference intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ,  Reference intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) , new(a, 20)]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) , new(a, 20)]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) ))]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) ))]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ,  Reference intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ,  Reference intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) , new(a, 20)]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) , new(a, 20)]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) ))]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) ))]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ,  Reference intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ,  Reference intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) , new(a, 20)]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) , new(a, 20)]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) ))]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) ))]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ,  Reference intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ,  Reference intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) , new(a, 20)]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) , new(a, 20)]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) ))]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) ))]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ,  Reference intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ,  Reference intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) , new(a, 20)]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) , new(a, 20)]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) ))]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) ))]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ,  Reference intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ,  Reference intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) , new(a, 20)]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) , new(a, 20)]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) ))]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) ))]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ,  Reference intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ,  Reference intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) , new(a, 20)]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) , new(a, 20)]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) ))]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) ))]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ,  Reference intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ,  Reference intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) , new(a, 20)]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) , new(a, 20)]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) ))]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) ))]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ,  Reference intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ,  Reference intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  , new(a, 20)]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  , new(a, 20)]]
	SymTable = [{a=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) , intType v]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) , intType v]]
	SymTable = [{a=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) ))]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) ))]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  v=0,(while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ) ]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  v=0,(while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ) ]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ), v=0]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ), v=0]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 )]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 )]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ),  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ),  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ), v=v+1, fork(  print(v),v=v*ReadHeap(a) )]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ), v=v+1, fork(  print(v),v=v*ReadHeap(a) )]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ), v=v+1]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v),v=v*ReadHeap(a) ]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ), v=v+1]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v),v=v*ReadHeap(a) ]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 )]]
	SymTable = [{a=(1, intType), v=1}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 2
	ExeStack = [[v=v*ReadHeap(a),  print(v)]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 )]]
	SymTable = [{a=(1, intType), v=1}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 2
	ExeStack = [[v=v*ReadHeap(a),  print(v)]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ),  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ]]
	SymTable = [{a=(1, intType), v=1}]
	OUT = {[0]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 2
	ExeStack = [[v=v*ReadHeap(a)]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[0]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ),  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ]]
	SymTable = [{a=(1, intType), v=1}]
	OUT = {[0]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 2
	ExeStack = [[v=v*ReadHeap(a)]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[0]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ), v=v+1, fork(  print(v),v=v*ReadHeap(a) )]]
	SymTable = [{a=(1, intType), v=1}]
	OUT = {[0]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=0}]
	OUT = {[0]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ), v=v+1, fork(  print(v),v=v*ReadHeap(a) )]]
	SymTable = [{a=(1, intType), v=1}]
	OUT = {[0]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ), v=v+1]]
	SymTable = [{a=(1, intType), v=1}]
	OUT = {[0]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v),v=v*ReadHeap(a) ]]
	SymTable = [{a=(1, intType), v=1}]
	OUT = {[0]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ), v=v+1]]
	SymTable = [{a=(1, intType), v=1}]
	OUT = {[0]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v),v=v*ReadHeap(a) ]]
	SymTable = [{a=(1, intType), v=1}]
	OUT = {[0]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 )]]
	SymTable = [{a=(1, intType), v=2}]
	OUT = {[0]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 3
	ExeStack = [[v=v*ReadHeap(a),  print(v)]]
	SymTable = [{a=(1, intType), v=1}]
	OUT = {[0]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 )]]
	SymTable = [{a=(1, intType), v=2}]
	OUT = {[0]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 3
	ExeStack = [[v=v*ReadHeap(a),  print(v)]]
	SymTable = [{a=(1, intType), v=1}]
	OUT = {[0]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ),  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ]]
	SymTable = [{a=(1, intType), v=2}]
	OUT = {[0, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 3
	ExeStack = [[v=v*ReadHeap(a)]]
	SymTable = [{a=(1, intType), v=1}]
	OUT = {[0, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ),  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ]]
	SymTable = [{a=(1, intType), v=2}]
	OUT = {[0, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 3
	ExeStack = [[v=v*ReadHeap(a)]]
	SymTable = [{a=(1, intType), v=1}]
	OUT = {[0, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ), v=v+1, fork(  print(v),v=v*ReadHeap(a) )]]
	SymTable = [{a=(1, intType), v=2}]
	OUT = {[0, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=20}]
	OUT = {[0, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ), v=v+1, fork(  print(v),v=v*ReadHeap(a) )]]
	SymTable = [{a=(1, intType), v=2}]
	OUT = {[0, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ), v=v+1]]
	SymTable = [{a=(1, intType), v=2}]
	OUT = {[0, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 4
	ExeStack = [[  print(v),v=v*ReadHeap(a) ]]
	SymTable = [{a=(1, intType), v=2}]
	OUT = {[0, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 ), v=v+1]]
	SymTable = [{a=(1, intType), v=2}]
	OUT = {[0, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 4
	ExeStack = [[  print(v),v=v*ReadHeap(a) ]]
	SymTable = [{a=(1, intType), v=2}]
	OUT = {[0, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 )]]
	SymTable = [{a=(1, intType), v=3}]
	OUT = {[0, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 4
	ExeStack = [[v=v*ReadHeap(a),  print(v)]]
	SymTable = [{a=(1, intType), v=2}]
	OUT = {[0, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)), (while (v<3)  fork(  print(v),v=v*ReadHeap(a) ),v=v+1 )]]
	SymTable = [{a=(1, intType), v=3}]
	OUT = {[0, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 4
	ExeStack = [[v=v*ReadHeap(a),  print(v)]]
	SymTable = [{a=(1, intType), v=2}]
	OUT = {[0, 1]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=3}]
	OUT = {[0, 1, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 4
	ExeStack = [[v=v*ReadHeap(a)]]
	SymTable = [{a=(1, intType), v=2}]
	OUT = {[0, 1, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=3}]
	OUT = {[0, 1, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 4
	ExeStack = [[v=v*ReadHeap(a)]]
	SymTable = [{a=(1, intType), v=2}]
	OUT = {[0, 1, 2]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=3}]
	OUT = {[0, 1, 2, 20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType a, new(a, 20), intType v, ( for(v=0; v<3;v=v+1) fork(  print(v),v=v*ReadHeap(a) )), print(ReadHeap(a))    ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=40}]
	OUT = {[0, 1, 2, 20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  print(v),v=v*ReadHeap(a) ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a),  print(v)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a),  print(v)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[(1, intType), (2,  Reference intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=20}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=1, v1=(3, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=20}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=20}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=1, v1=(3, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 3=20}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 4=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=1, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 4=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 4=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=1, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 4=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=1, v1=(5, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 5=20, 6=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(6, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 5=20, 6=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 5=20, 6=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=1, v1=(5, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 5=20, 6=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(6, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 5=20, 6=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30, 5=20, 6=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{q=0, x=1, v1=(5, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(6, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{q=0, x=1, v1=(5, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(6, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{q=0, x=1, v1=(5, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(6, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=1, v1=(5, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(6, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=1, v1=(7, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20, 7=20, 8=30}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(6, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20, 7=20, 8=30}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20, 7=20, 8=30}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20, 7=20, 8=30}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=1, v1=(7, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20, 7=20, 8=30}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(6, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20, 7=20, 8=30}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20, 7=20, 8=30}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 5=20, 7=20, 8=30}]
	LockTable= [{1=-1, 2=-1, 3=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{q=0, x=4, v1=(7, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(6, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{q=0, x=4, v1=(7, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(6, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=4, v1=(7, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20, 9=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(6, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20, 9=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20, 9=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=3, v1=(9, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20, 9=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{q=0, x=4, v1=(7, intType), v2=(10, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20, 10=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(6, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20, 10=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20, 10=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{q=0, x=5, v1=(9, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20, 10=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{q=0, x=5, v1=(9, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20, 10=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{q=0, x=4, v1=(7, intType), v2=(10, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20, 10=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(6, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20, 10=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20, 10=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{q=0, x=5, v1=(9, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20, 10=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{q=0, x=5, v1=(9, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {2=30, 7=20, 10=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{q=0, x=4, v1=(7, intType), v2=(10, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 10=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(6, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 10=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 10=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{q=0, x=5, v1=(9, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 10=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{q=0, x=5, v1=(9, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 10=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=4, v1=(7, intType), v2=(10, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 10=30, 11=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(6, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 10=30, 11=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 10=30, 11=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=5, v1=(9, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 10=30, 11=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=5, v1=(11, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 10=30, 11=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{q=0, x=4, v1=(7, intType), v2=(12, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 10=30, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(6, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 10=30, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 10=30, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{q=0, x=6, v1=(9, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 10=30, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{q=0, x=5, v1=(11, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 10=30, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{q=0, x=4, v1=(7, intType), v2=(12, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(6, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{q=0, x=6, v1=(9, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{q=0, x=5, v1=(11, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=4, v1=(7, intType), v2=(12, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30, 13=20, 14=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(14, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30, 13=20, 14=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=3, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30, 13=20, 14=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=6, v1=(13, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30, 13=20, 14=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=5, v1=(11, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30, 13=20, 14=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{q=0, x=4, v1=(7, intType), v2=(12, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(14, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{q=0, x=7, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{q=0, x=6, v1=(13, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{q=0, x=5, v1=(11, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=4, v1=(7, intType), v2=(12, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(14, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=7, v1=(3, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=6, v1=(13, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=5, v1=(11, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=4, v1=(7, intType), v2=(12, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {16=30, 7=20, 12=30, 15=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(14, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {16=30, 7=20, 12=30, 15=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=7, v1=(15, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {16=30, 7=20, 12=30, 15=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=6, v1=(13, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {16=30, 7=20, 12=30, 15=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=5, v1=(11, intType), v2=(16, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {16=30, 7=20, 12=30, 15=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=4, v1=(7, intType), v2=(12, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {16=30, 7=20, 12=30, 15=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(14, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {16=30, 7=20, 12=30, 15=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=7, v1=(15, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {16=30, 7=20, 12=30, 15=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=6, v1=(13, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {16=30, 7=20, 12=30, 15=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=5, v1=(11, intType), v2=(16, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {16=30, 7=20, 12=30, 15=20}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{q=0, x=8, v1=(7, intType), v2=(12, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(14, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{q=0, x=7, v1=(15, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{q=0, x=6, v1=(13, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{q=0, x=5, v1=(11, intType), v2=(16, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=8, v1=(7, intType), v2=(12, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=2, v1=(3, intType), v2=(14, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=7, v1=(15, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=6, v1=(13, intType), v2=(8, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=5, v1=(11, intType), v2=(16, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=8, v1=(17, intType), v2=(12, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 18=30, 7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=9, v1=(3, intType), v2=(14, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 18=30, 7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=7, v1=(15, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 18=30, 7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=6, v1=(13, intType), v2=(18, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 18=30, 7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=5, v1=(11, intType), v2=(16, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 18=30, 7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 10
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=9, v1=(3, intType), v2=(14, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 18=30, 7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=8, v1=(17, intType), v2=(12, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 18=30, 7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=9, v1=(3, intType), v2=(14, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 18=30, 7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=7, v1=(15, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 18=30, 7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=6, v1=(13, intType), v2=(18, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 18=30, 7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=5, v1=(11, intType), v2=(16, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 18=30, 7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 10
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=9, v1=(3, intType), v2=(14, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 18=30, 7=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{q=0, x=8, v1=(17, intType), v2=(12, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{q=0, x=9, v1=(3, intType), v2=(14, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{q=0, x=7, v1=(15, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{q=0, x=6, v1=(13, intType), v2=(18, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{q=0, x=5, v1=(11, intType), v2=(16, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 10
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{q=0, x=9, v1=(3, intType), v2=(14, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=8, v1=(17, intType), v2=(12, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 19=20, 20=30, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=9, v1=(3, intType), v2=(20, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 19=20, 20=30, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=7, v1=(15, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 19=20, 20=30, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=6, v1=(13, intType), v2=(18, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 19=20, 20=30, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=5, v1=(19, intType), v2=(16, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 19=20, 20=30, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 10
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=9, v1=(3, intType), v2=(14, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 19=20, 20=30, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{q=0, x=8, v1=(17, intType), v2=(12, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1, 10=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{q=0, x=9, v1=(3, intType), v2=(20, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1, 10=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 3
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{q=0, x=10, v1=(15, intType), v2=(4, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1, 10=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{q=0, x=6, v1=(13, intType), v2=(18, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1, 10=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{q=0, x=5, v1=(19, intType), v2=(16, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1, 10=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 10
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,  intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{q=0, x=9, v1=(3, intType), v2=(14, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {17=20, 12=30}]
	LockTable= [{1=-1, 2=-1, 3=-1, 4=-1, 5=-1, 6=-1, 7=-1, 8=-1, 9=-1, 10=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ,   Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=2, x=1, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{1=-1, 2=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 350]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 350]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 350]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 350]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 350]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 350]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=350}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=3, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=2, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=4}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 4
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=5}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 5
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                  ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ,  Reference intType v2]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                 ]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                , intType x]]
	SymTable = [{v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                ]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               , intType q]]
	SymTable = [{x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)               ]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              , new(v1, 20)]]
	SymTable = [{q=0, x=0, v1=(0, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)              ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             , new(v2, 30)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)             ]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            , newLock(x)]]
	SymTable = [{q=0, x=0, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)            ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           , fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 6
	ExeStack = [[ newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)           ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          , newLock(q)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  , fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  )]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 8
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 6
	ExeStack = [[ fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)          ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 8
	ExeStack = [[ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 6
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 8
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 6
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         , fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 8
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 6
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 8
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 9
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 6
	ExeStack = [[ NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)         ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 8
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)-1),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 9
	ExeStack = [[ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 6
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 8
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 9
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 6
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 8
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)-1)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 9
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  , fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  )]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 6
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 8
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 9
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 10
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[ NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)        ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) , Lock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 8
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 9
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 10
	ExeStack = [[ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=8, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=7, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=7, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 8
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=7, 101=-1}]
	
	OriginalProgram = [ Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ]


Program State: 
	 Id: 9
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=7, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 10
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=7, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=7, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),Unock(x) ]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=7, 101=-1}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 9
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=7, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 10
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=7, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=7, 101=9}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=7, 101=9}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 9
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=7, 101=9}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 10
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=7, 101=9}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[ NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)       ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=7, 101=9}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[Unock(x), WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=7, 101=9}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 9
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)*10),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=7, 101=9}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 10
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=19, 2=30}]
	LockTable= [{100=7, 101=9}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=7, 101=9}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=7, 101=9}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 9
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=7, 101=9}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 10
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=7, 101=9}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=7, 101=9}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[Unock(x)]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=7, 101=9}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 9
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)*10)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=7, 101=9}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 10
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=30}]
	LockTable= [{100=7, 101=9}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=9}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 7
	ExeStack = [[]]
	SymTable = [{q=0, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=9}]
	
	OriginalProgram = [ fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ]


Program State: 
	 Id: 9
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=9}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 10
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=9}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[ NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)      ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=9}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 9
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=9}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 10
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=9}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 9
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ]


Program State: 
	 Id: 10
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     , NoOp]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 10
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=10}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 10
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=10}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[ Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)     ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=10}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 10
	ExeStack = [[ WrSt = (v2, ReadHeap(v2)+5),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=10}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=10}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 10
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=10}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    , Lock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=10}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 10
	ExeStack = [[Unock(q), WrSt = (v2, ReadHeap(v2)+5)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=300}]
	LockTable= [{100=-1, 101=10}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=6, 101=10}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 10
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=6, 101=10}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)    ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=6, 101=10}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 10
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=6, 101=10}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=6, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 10
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=6, 101=-1}]
	
	OriginalProgram = [ Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ]


Program State: 
	 Id: 6
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ,  print(ReadHeap(v1))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=6, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=6, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)   ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=6, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=6, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  , Unock(x)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=6, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[ Lock(q),  print(ReadHeap(v2)),Unock(q)  ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) , Lock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=6}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[  print(ReadHeap(v2)),Unock(q) ]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=6}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=6}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[Unock(q),  print(ReadHeap(v2))]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=6}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=6}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[Unock(q)]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=6}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


Program State: 
	 Id: 6
	ExeStack = [[]]
	SymTable = [{q=101, x=100, v1=(1, intType), v2=(2, intType)}]
	OUT = {[190, 305]}
	MyFileTable = [{}]
	MyHeap=[ {1=190, 2=305}]
	LockTable= [{100=-1, 101=-1}]
	
	OriginalProgram = [  Reference intType v1,  Reference intType v2, intType x, intType q, new(v1, 20), new(v2, 30), newLock(x), fork( fork( Lock(x), WrSt = (v1, ReadHeap(v1)-1),Unock(x)  ), Lock(x), WrSt = (v1, ReadHeap(v1)*10),Unock(x)   ), newLock(q), fork( fork( Lock(q), WrSt = (v2, ReadHeap(v2)+5),Unock(q)  ), Lock(q), WrSt = (v2, ReadHeap(v2)*10),Unock(q)   ), NoOp, NoOp, NoOp, NoOp, Lock(x),  print(ReadHeap(v1)), Unock(x), Lock(q),  print(ReadHeap(v2)),Unock(q)                   ]


