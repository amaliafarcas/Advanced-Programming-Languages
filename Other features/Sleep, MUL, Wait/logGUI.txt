Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ intType v, v=2, print(v)  ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ v=2, print(v) , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ v=2, print(v) , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ v=2, print(v) ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ v=2, print(v) ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), v=2]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), v=2]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v)]]
	SymTable = [{v=2}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v)]]
	SymTable = [{v=2}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{v=2}]
	OUT = {[2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))), new(v, 30)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))), new(v, 30)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a)))]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a)))]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       , stringType varf]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       , stringType varf]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       ]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       ]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      , varf=test.in]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      , varf=test.in]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     , openReadFile{expression=varf}]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     , openReadFile{expression=varf}]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    , intType varc]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    , intType varc]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    ]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    ]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ,  print(varc)]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ,  print(varc)]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc),closeReadFile{expression=varf} , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc),closeReadFile{expression=varf} , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc),closeReadFile{expression=varf} ]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc),closeReadFile{expression=varf} ]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[closeReadFile{expression=varf},  print(varc)]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[closeReadFile{expression=varf},  print(varc)]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[closeReadFile{expression=varf}]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15, 50]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[closeReadFile{expression=varf}]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15, 50]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15, 50]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))), new(v, 30)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))), new(v, 30)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a)))]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a)))]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ,  print(ReadHeap(v))]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ,  print(ReadHeap(v))]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5), WrSt = (v, 30)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5), WrSt = (v, 30)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20, 35]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ v=4, (while (v>0)   print(v),v=v-1 ), print(v)  , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ v=4, (while (v>0)   print(v),v=v-1 ), print(v)  , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ v=4, (while (v>0)   print(v),v=v-1 ), print(v)  ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ v=4, (while (v>0)   print(v),v=v-1 ), print(v)  ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ (while (v>0)   print(v),v=v-1 ), print(v) , v=4]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ (while (v>0)   print(v),v=v-1 ), print(v) , v=4]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ (while (v>0)   print(v),v=v-1 ), print(v) ]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ (while (v>0)   print(v),v=v-1 ), print(v) ]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=4}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=4}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=3}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=3}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=2}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=2}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v)]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v)]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1, 0]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a),  print(v)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a),  print(v)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[(1, intType), (2,  Reference intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ,  print(ReadHeap(v))]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ,  print(ReadHeap(v))]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(v)+5), WrSt = (v, 30)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(v)+5), WrSt = (v, 30)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(v)+5)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(v)+5)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20, 35]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)   , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)   , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)   ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)   ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)  , v=10]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)  , v=10]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)  ]]
	SymTable = [{v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)  ]]
	SymTable = [{v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ Sleep(10), print(v*10) , fork( v=v-1, v=v-1, print(v)  )]]
	SymTable = [{v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ Sleep(10), print(v*10) , fork( v=v-1, v=v-1, print(v)  )]]
	SymTable = [{v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ Sleep(10), print(v*10) ]]
	SymTable = [{v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 2
	ExeStack = [[ v=v-1, v=v-1, print(v)  ]]
	SymTable = [{v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ v=v-1, v=v-1, print(v)  ]


Program State: 
	 Id: 1
	ExeStack = [[ Sleep(10), print(v*10) ]]
	SymTable = [{v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 2
	ExeStack = [[ v=v-1, v=v-1, print(v)  ]]
	SymTable = [{v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ v=v-1, v=v-1, print(v)  ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(10)]]
	SymTable = [{v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 2
	ExeStack = [[ v=v-1, print(v) , v=v-1]]
	SymTable = [{v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ v=v-1, v=v-1, print(v)  ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(10)]]
	SymTable = [{v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 2
	ExeStack = [[ v=v-1, print(v) , v=v-1]]
	SymTable = [{v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ v=v-1, v=v-1, print(v)  ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(9)]]
	SymTable = [{v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 2
	ExeStack = [[ v=v-1, print(v) ]]
	SymTable = [{v=9}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ v=v-1, v=v-1, print(v)  ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(9)]]
	SymTable = [{v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 2
	ExeStack = [[ v=v-1, print(v) ]]
	SymTable = [{v=9}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ v=v-1, v=v-1, print(v)  ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(8)]]
	SymTable = [{v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 2
	ExeStack = [[ print(v), v=v-1]]
	SymTable = [{v=9}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ v=v-1, v=v-1, print(v)  ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(8)]]
	SymTable = [{v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 2
	ExeStack = [[ print(v), v=v-1]]
	SymTable = [{v=9}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ v=v-1, v=v-1, print(v)  ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(7)]]
	SymTable = [{v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 2
	ExeStack = [[ print(v)]]
	SymTable = [{v=8}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ v=v-1, v=v-1, print(v)  ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(7)]]
	SymTable = [{v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 2
	ExeStack = [[ print(v)]]
	SymTable = [{v=8}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ v=v-1, v=v-1, print(v)  ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(6)]]
	SymTable = [{v=10}]
	OUT = {[8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{v=8}]
	OUT = {[8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ v=v-1, v=v-1, print(v)  ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(6)]]
	SymTable = [{v=10}]
	OUT = {[8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(5)]]
	SymTable = [{v=10}]
	OUT = {[8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(5)]]
	SymTable = [{v=10}]
	OUT = {[8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(4)]]
	SymTable = [{v=10}]
	OUT = {[8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(4)]]
	SymTable = [{v=10}]
	OUT = {[8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(3)]]
	SymTable = [{v=10}]
	OUT = {[8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(3)]]
	SymTable = [{v=10}]
	OUT = {[8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(2)]]
	SymTable = [{v=10}]
	OUT = {[8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(2)]]
	SymTable = [{v=10}]
	OUT = {[8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(1)]]
	SymTable = [{v=10}]
	OUT = {[8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(1)]]
	SymTable = [{v=10}]
	OUT = {[8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(0)]]
	SymTable = [{v=10}]
	OUT = {[8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(0)]]
	SymTable = [{v=10}]
	OUT = {[8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10)]]
	SymTable = [{v=10}]
	OUT = {[8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10)]]
	SymTable = [{v=10}]
	OUT = {[8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{v=10}]
	OUT = {[8, 100]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=10, fork( v=v-1, v=v-1, print(v)  ), Sleep(10), print(v*10)    ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v1, intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))   , intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))   , intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))   ]]
	SymTable = [{v1=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))   ]]
	SymTable = [{v1=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))  , intType v2]]
	SymTable = [{v1=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))  , intType v2]]
	SymTable = [{v1=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))  ]]
	SymTable = [{v1=0, v2=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))  ]]
	SymTable = [{v1=0, v2=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1))) , v1=2]]
	SymTable = [{v1=0, v2=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1))) , v1=2]]
	SymTable = [{v1=0, v2=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1))) ]]
	SymTable = [{v1=2, v2=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1))) ]]
	SymTable = [{v1=2, v2=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1))), v2=3]]
	SymTable = [{v1=2, v2=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1))), v2=3]]
	SymTable = [{v1=2, v2=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))]]
	SymTable = [{v1=2, v2=3}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))]]
	SymTable = [{v1=2, v2=3}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))   , intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))   , intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))   ]]
	SymTable = [{v1=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))   ]]
	SymTable = [{v1=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))  , intType v2]]
	SymTable = [{v1=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))  , intType v2]]
	SymTable = [{v1=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))  ]]
	SymTable = [{v1=0, v2=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))  ]]
	SymTable = [{v1=0, v2=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1))) , v1=2]]
	SymTable = [{v1=0, v2=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1))) , v1=2]]
	SymTable = [{v1=0, v2=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1))) ]]
	SymTable = [{v1=2, v2=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1))) ]]
	SymTable = [{v1=2, v2=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1))), v2=3]]
	SymTable = [{v1=2, v2=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1))), v2=3]]
	SymTable = [{v1=2, v2=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))]]
	SymTable = [{v1=2, v2=3}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))]]
	SymTable = [{v1=2, v2=3}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(MUL(v1, v2))]]
	SymTable = [{v1=2, v2=3}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(MUL(v1, v2))]]
	SymTable = [{v1=2, v2=3}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{v1=2, v2=3}]
	OUT = {[1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v1, intType v2, v1=2, v2=3, (IF(v1!=0)THEN( print(MUL(v1, v2)))ELSE( print(v1)))    ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v, v=20, Wait(20), print(v*10)   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ v=20, Wait(20), print(v*10)  , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ v=20, Wait(20), print(v*10)  , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ v=20, Wait(20), print(v*10)  ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ v=20, Wait(20), print(v*10)  ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Wait(20), print(v*10) , v=20]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Wait(20), print(v*10) , v=20]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Wait(20), print(v*10) ]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Wait(20), print(v*10) ]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(20)]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(20)]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(20),Sleep(19) ]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(20),Sleep(19) ]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(19),  print(20)]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(19),  print(20)]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(19)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(19)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(18)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(18)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(17)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(17)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(16)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(16)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(15)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(15)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(14)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(14)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(13)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(13)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(12)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(12)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(11)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(11)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(10)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(10)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(9)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(9)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(8)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(8)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(7)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(7)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(6)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(6)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(5)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(5)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(4)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(4)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(3)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(3)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(2)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(2)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(1)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(1)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(0)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(0)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{v=20}]
	OUT = {[20, 200]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v, v=20, Wait(20), print(v*10)   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ v=20, Wait(20), print(v*10)  , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ v=20, Wait(20), print(v*10)  , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ v=20, Wait(20), print(v*10)  ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ v=20, Wait(20), print(v*10)  ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Wait(20), print(v*10) , v=20]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Wait(20), print(v*10) , v=20]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Wait(20), print(v*10) ]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Wait(20), print(v*10) ]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(20)]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(20)]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(20),Sleep(19) ]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(20),Sleep(19) ]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(19),  print(20)]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(19),  print(20)]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Sleep(19)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v, v=20, Wait(20), print(v*10)   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ v=20, Wait(20), print(v*10)  , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ v=20, Wait(20), print(v*10)  , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ v=20, Wait(20), print(v*10)  ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ v=20, Wait(20), print(v*10)  ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Wait(20), print(v*10) , v=20]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Wait(20), print(v*10) , v=20]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Wait(20), print(v*10) ]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Wait(20), print(v*10) ]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(20)]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(20)]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(20),Wait(19) ]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(20),Wait(19) ]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(19),  print(20)]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(19),  print(20)]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(19)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(19)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(19),Wait(18) ]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(19),Wait(18) ]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(18),  print(19)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(18),  print(19)]]
	SymTable = [{v=20}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(18)]]
	SymTable = [{v=20}]
	OUT = {[20, 19]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(18)]]
	SymTable = [{v=20}]
	OUT = {[20, 19]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(18),Wait(17) ]]
	SymTable = [{v=20}]
	OUT = {[20, 19]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(18),Wait(17) ]]
	SymTable = [{v=20}]
	OUT = {[20, 19]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(17),  print(18)]]
	SymTable = [{v=20}]
	OUT = {[20, 19]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(20), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v, v=20, Wait(10), print(v*10)   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ v=20, Wait(10), print(v*10)  , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ v=20, Wait(10), print(v*10)  , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ v=20, Wait(10), print(v*10)  ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ v=20, Wait(10), print(v*10)  ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Wait(10), print(v*10) , v=20]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Wait(10), print(v*10) , v=20]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Wait(10), print(v*10) ]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Wait(10), print(v*10) ]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(10)]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(10)]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(10),Wait(9) ]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(10),Wait(9) ]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(9),  print(10)]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(9),  print(10)]]
	SymTable = [{v=20}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(9)]]
	SymTable = [{v=20}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(9)]]
	SymTable = [{v=20}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(9),Wait(8) ]]
	SymTable = [{v=20}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(9),Wait(8) ]]
	SymTable = [{v=20}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(8),  print(9)]]
	SymTable = [{v=20}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(8),  print(9)]]
	SymTable = [{v=20}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(8)]]
	SymTable = [{v=20}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(8)]]
	SymTable = [{v=20}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(8),Wait(7) ]]
	SymTable = [{v=20}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(8),Wait(7) ]]
	SymTable = [{v=20}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(7),  print(8)]]
	SymTable = [{v=20}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(7),  print(8)]]
	SymTable = [{v=20}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(7)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(7)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(7),Wait(6) ]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(7),Wait(6) ]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(6),  print(7)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(6),  print(7)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(6)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(6)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(6),Wait(5) ]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(6),Wait(5) ]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(5),  print(6)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(5),  print(6)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(5)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(5)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(5),Wait(4) ]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(5),Wait(4) ]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(4),  print(5)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(4),  print(5)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(4)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(4)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(4),Wait(3) ]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(4),Wait(3) ]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(3),  print(4)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(3),  print(4)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(3)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(3)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(3),Wait(2) ]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(3),Wait(2) ]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(2),  print(3)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(2),  print(3)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(2)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(2)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(2),Wait(1) ]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(2),Wait(1) ]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(1),  print(2)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(1),  print(2)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(1)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(1)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(1),Wait(0) ]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10),   print(1),Wait(0) ]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(0),  print(1)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(0),  print(1)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(0)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10), Wait(0)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(v*10)]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{v=20}]
	OUT = {[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 200]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=20, Wait(10), print(v*10)   ]


