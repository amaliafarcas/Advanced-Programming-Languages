Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ intType v, v=2, print(v)  ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ v=2, print(v) , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ v=2, print(v) , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ v=2, print(v) ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ v=2, print(v) ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), v=2]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), v=2]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v)]]
	SymTable = [{v=2}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v)]]
	SymTable = [{v=2}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{v=2}]
	OUT = {[2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=2, print(v)  ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))), new(v, 30)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))), new(v, 30)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a)))]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a)))]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       , stringType varf]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       , stringType varf]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       ]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}       ]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      , varf=test.in]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      , varf=test.in]]
	SymTable = [{varf=}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}      ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     , openReadFile{expression=varf}]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     , openReadFile{expression=varf}]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}     ]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    , intType varc]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    , intType varc]]
	SymTable = [{varf=test.in}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    ]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}    ]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=0}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}   ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ,  print(varc)]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ,  print(varc)]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[ readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}  ]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc),closeReadFile{expression=varf} , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc),closeReadFile{expression=varf} , readFile{expression=varf, variable_name='varc'}]]
	SymTable = [{varf=test.in, varc=15}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc),closeReadFile{expression=varf} ]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  print(varc),closeReadFile{expression=varf} ]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[closeReadFile{expression=varf},  print(varc)]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[closeReadFile{expression=varf},  print(varc)]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[closeReadFile{expression=varf}]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15, 50]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[closeReadFile{expression=varf}]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15, 50]}
	MyFileTable = [{test.in=java.io.BufferedReader@171dccba}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{varf=test.in, varc=50}]
	OUT = {[15, 50]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ stringType varf, varf=test.in, openReadFile{expression=varf}, intType varc, readFile{expression=varf, variable_name='varc'},  print(varc), readFile{expression=varf, variable_name='varc'},  print(varc),closeReadFile{expression=varf}        ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 30), print(ReadHeap(ReadHeap(a))) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))), new(v, 30)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a))), new(v, 30)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a)))]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(ReadHeap(a)))]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(2,  Reference intType), v=(3, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType), 3=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v), new(v, 30), print(ReadHeap(ReadHeap(a)))     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ,  print(ReadHeap(v))]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ,  print(ReadHeap(v))]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5), WrSt = (v, 30)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5), WrSt = (v, 30)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(v)+5)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20, 35]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 3
	ExeStack = [[ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ v=4, (while (v>0)   print(v),v=v-1 ), print(v)  , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ v=4, (while (v>0)   print(v),v=v-1 ), print(v)  , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ v=4, (while (v>0)   print(v),v=v-1 ), print(v)  ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ v=4, (while (v>0)   print(v),v=v-1 ), print(v)  ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ (while (v>0)   print(v),v=v-1 ), print(v) , v=4]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ (while (v>0)   print(v),v=v-1 ), print(v) , v=4]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ (while (v>0)   print(v),v=v-1 ), print(v) ]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ (while (v>0)   print(v),v=v-1 ), print(v) ]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=4}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=4}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=4}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=3}]
	OUT = {[4]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=3}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=3}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=2}]
	OUT = {[4, 3]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=2}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=2}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ),   print(v),v=v-1 ]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1,  print(v)]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 ), v=v-1]]
	SymTable = [{v=1}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v), (while (v>0)   print(v),v=v-1 )]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v)]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[ print(v)]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{v=0}]
	OUT = {[4, 3, 2, 1, 0]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v, v=4, (while (v>0)   print(v),v=v-1 ), print(v)   ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)    ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference  Reference intType a, new(a, v),  print(v), print(a)   ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ,  Reference  Reference intType a]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, v),  print(v), print(a)  ]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) , new(a, v)]]
	SymTable = [{a=(0,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(a) ]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a),  print(v)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a),  print(v)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ print(a)]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[(1, intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(2,  Reference intType), v=(1, intType)}]
	OUT = {[(1, intType), (2,  Reference intType)]}
	MyFileTable = [{}]
	MyHeap=[ {1=20, 2=(1, intType)}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  Reference  Reference intType a, new(a, v),  print(v), print(a)     ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     , intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))     ]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ,  Reference intType a]]
	SymTable = [{v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))    ]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   , v=10]]
	SymTable = [{a=(0, intType), v=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  , new(a, 22)]]
	SymTable = [{a=(0, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) , fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   )]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  , WrSt = (a, 30)]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=22}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[ v=32,  print(v), print(ReadHeap(a))  ]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ intType v,  Reference intType a, v=10, new(a, 22), fork( WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ),  print(v), print(ReadHeap(a))      ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) , v=32]]
	SymTable = [{a=(1, intType), v=10}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  print(v), print(ReadHeap(a)) ]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a)),  print(v)]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(a))]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{a=(1, intType), v=32}]
	OUT = {[10, 30, 32, 30]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [ WrSt = (a, 30), v=32,  print(v), print(ReadHeap(a))   ]


Program State: 
	 Id: 2
	ExeStack = [[  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ,  Reference intType v]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)   ]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  , new(v, 20)]]
	SymTable = [{v=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)  ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ,  print(ReadHeap(v))]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ,  print(ReadHeap(v))]]
	SymTable = [{v=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v, 30), print(ReadHeap(v)+5) ]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(v)+5), WrSt = (v, 30)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(v)+5), WrSt = (v, 30)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=20}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(v)+5)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[ print(ReadHeap(v)+5)]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{v=(1, intType)}]
	OUT = {[20, 35]}
	MyFileTable = [{}]
	MyHeap=[ {1=30}]
	
	OriginalProgram = [  Reference intType v, new(v, 20),  print(ReadHeap(v)), WrSt = (v, 30), print(ReadHeap(v)+5)    ]


Program State: 
	 Id: 1
	ExeStack = [[ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)      , intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)      , intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)      ]]
	SymTable = [{a=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)      ]]
	SymTable = [{a=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)     , intType b]]
	SymTable = [{a=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)     , intType b]]
	SymTable = [{a=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)     ]]
	SymTable = [{a=0, b=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)     ]]
	SymTable = [{a=0, b=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)    , intType c]]
	SymTable = [{a=0, b=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)    , intType c]]
	SymTable = [{a=0, b=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)    ]]
	SymTable = [{a=0, b=0, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)    ]]
	SymTable = [{a=0, b=0, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)   , a=1]]
	SymTable = [{a=0, b=0, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)   , a=1]]
	SymTable = [{a=0, b=0, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)   ]]
	SymTable = [{a=1, b=0, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)   ]]
	SymTable = [{a=1, b=0, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)  , b=2]]
	SymTable = [{a=1, b=0, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)  , b=2]]
	SymTable = [{a=1, b=0, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)  ]]
	SymTable = [{a=1, b=2, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)  ]]
	SymTable = [{a=1, b=2, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300) , c=5]]
	SymTable = [{a=1, b=2, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300) , c=5]]
	SymTable = [{a=1, b=2, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300) ]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300) ]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ print(300), Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300)))]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ print(300), Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300)))]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ print(300),  (IF(a*10&&b*c)THEN(  print(a), print(b) )ELSE( (IF(a*10&&10)THEN(  print(100), print(200) )ELSE( print(300)))))]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ print(300),  (IF(a*10&&b*c)THEN(  print(a), print(b) )ELSE( (IF(a*10&&10)THEN(  print(100), print(200) )ELSE( print(300)))))]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ print(300)]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[300]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)      , intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)      , intType a]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)      ]]
	SymTable = [{a=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)      ]]
	SymTable = [{a=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)     , intType b]]
	SymTable = [{a=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)     , intType b]]
	SymTable = [{a=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)     ]]
	SymTable = [{a=0, b=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)     ]]
	SymTable = [{a=0, b=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)    , intType c]]
	SymTable = [{a=0, b=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)    , intType c]]
	SymTable = [{a=0, b=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)    ]]
	SymTable = [{a=0, b=0, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)    ]]
	SymTable = [{a=0, b=0, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)   , a=1]]
	SymTable = [{a=0, b=0, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)   , a=1]]
	SymTable = [{a=0, b=0, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)   ]]
	SymTable = [{a=1, b=0, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)   ]]
	SymTable = [{a=1, b=0, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)  , b=2]]
	SymTable = [{a=1, b=0, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)  , b=2]]
	SymTable = [{a=1, b=0, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)  ]]
	SymTable = [{a=1, b=2, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)  ]]
	SymTable = [{a=1, b=2, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300) , c=5]]
	SymTable = [{a=1, b=2, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300) , c=5]]
	SymTable = [{a=1, b=2, c=0}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300) ]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300) ]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ print(300), Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300)))]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ print(300), Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300)))]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ print(300),  (IF(a*10==b*c)THEN(  print(a), print(b) )ELSE( (IF(a*10==10)THEN(  print(100), print(200) )ELSE( print(300)))))]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ print(300),  (IF(a*10==b*c)THEN(  print(a), print(b) )ELSE( (IF(a*10==10)THEN(  print(100), print(200) )ELSE( print(300)))))]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ print(300),   print(a), print(b) ]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ print(300),   print(a), print(b) ]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ print(300),  print(b),  print(a)]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ print(300),  print(b),  print(a)]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ print(300),  print(b)]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ print(300),  print(b)]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[1]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ print(300)]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[1, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[ print(300)]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[1, 2]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{a=1, b=2, c=5}]
	OUT = {[1, 2, 300]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [ intType a, intType b, intType c, a=1, b=2, c=5, Switch(a*10(case b*c :   print(a), print(b) )(case 10 :   print(100), print(200) )(default :  print(300))), print(300)       ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(v1) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(v1)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(v1)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(v1)    ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)  , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)  , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(cnt) , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(cnt) , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(cnt),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(cnt),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[Release(cnt),  print(ReadHeap(v1)-1)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[Release(cnt),  print(ReadHeap(v1)-1)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[Release(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[Release(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=100}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=100}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v1)),Release(cnt) , WrSt = (v1, ReadHeap(v1)*2)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=100}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v1)),Release(cnt) , WrSt = (v1, ReadHeap(v1)*2)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=100}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v1)),Release(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=200}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v1)),Release(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=200}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[Release(cnt),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=200}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[Release(cnt),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=200}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[Release(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9, 200]}
	MyFileTable = [{}]
	MyHeap=[ {1=200}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[Release(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9, 200]}
	MyFileTable = [{}]
	MyHeap=[ {1=200}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9, 200]}
	MyFileTable = [{}]
	MyHeap=[ {1=200}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ,  Reference intType v1]]
	SymTable = [{}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)       ]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      , intType cnt]]
	SymTable = [{v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)      ]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     , new(v1, 1)]]
	SymTable = [{cnt=0, v1=(0, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)     ]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    , CreateSemaphore(cnt, ReadHeap(v1))]]
	SymTable = [{cnt=0, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 1
	ExeStack = [[ fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)  , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  , fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    )]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)  , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[ Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(cnt) , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(cnt) , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=1}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[  print(ReadHeap(v1)),Release(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(cnt),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(cnt),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[Release(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[2]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 2
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[  print(ReadHeap(v1)-1),Release(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[Release(cnt),  print(ReadHeap(v1)-1)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[Release(cnt),  print(ReadHeap(v1)-1)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[Release(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[Release(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   , Acquire(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[1]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 1
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [  Reference intType v1, intType cnt, new(v1, 1), CreateSemaphore(cnt, ReadHeap(v1)), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10),  print(ReadHeap(v1)),Release(cnt)   ), fork( Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ), Acquire(cnt),  print(ReadHeap(v1)-1),Release(cnt)        ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)   ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)  , WrSt = (v1, ReadHeap(v1)*10)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=10}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=100}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[ WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)  ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=100}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v1)),Release(cnt) , WrSt = (v1, ReadHeap(v1)*2)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=100}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v1)),Release(cnt) , WrSt = (v1, ReadHeap(v1)*2)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=100}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v1)),Release(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=200}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[  print(ReadHeap(v1)),Release(cnt) ]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=200}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[Release(cnt),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=200}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[Release(cnt),  print(ReadHeap(v1))]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9]}
	MyFileTable = [{}]
	MyHeap=[ {1=200}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[Release(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9, 200]}
	MyFileTable = [{}]
	MyHeap=[ {1=200}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[Release(cnt)]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9, 200]}
	MyFileTable = [{}]
	MyHeap=[ {1=200}]
	SemaphoreTable=[ {100=1=[3]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


Program State: 
	 Id: 3
	ExeStack = [[]]
	SymTable = [{cnt=100, v1=(1, intType)}]
	OUT = {[10, 9, 200]}
	MyFileTable = [{}]
	MyHeap=[ {1=200}]
	SemaphoreTable=[ {100=1=[]}]
	
	OriginalProgram = [ Acquire(cnt), WrSt = (v1, ReadHeap(v1)*10), WrSt = (v1, ReadHeap(v1)*2),  print(ReadHeap(v1)),Release(cnt)    ]


